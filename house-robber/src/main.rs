//! ## 打家劫舍 ## 
//! [原题目地址](https://leetcode-cn.com/problems/house-robber/) 难度：<b>简单</b>
//! ### 题目描述 ###
//! 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
//! 
//! 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
//! 
//! 示例 1:
//! ```
//! 输入: [1,2,3,1]
//! 输出: 4
//! 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
//!      偷窃到的最高金额 = 1 + 3 = 4 。
//! ```
//! 示例 2:
//! ```
//! 输入: [2,7,9,3,1]
//! 输出: 12
//! 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
//!      偷窃到的最高金额 = 2 + 9 + 1 = 12 。
//! ```

pub struct Solution;

use std::cmp::max;
impl Solution {
    /// f(n) = max(f(n-1), f(n-2) + nums[n])
    /// 用两个变量保存f(n-1)和f(n-2)就行
    pub fn rob(nums: Vec<i32>) -> i32 {
        let mut m1 = 0;
        let mut m2 = 0;

        for i in 0..nums.len() {
            let temp = max(m1 + nums[i], m2);
            m1 = m2;
            m2 = temp;
        }

        m2
    }
}

fn main() {
    println!("Hello, world!");
}
